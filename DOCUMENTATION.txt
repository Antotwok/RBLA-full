DOCUMENTATION FOR RBLA5 PROJECT
================================

1. PROJECT OVERVIEW
-------------------
This project is a full-stack web application for managing an e-commerce/admin platform. It includes a robust admin dashboard, user-side features, and modular code for future enhancements. The system is designed for scalability and maintainability, allowing for easy addition of new features such as notifications, analytics, and more.

2. PROJECT STRUCTURE
--------------------
- backend/         # Node.js/Express backend (APIs, models, controllers, middleware)
- frontend/        # React frontend (pages, components, context, services)
- .gitignore, package.json, README.md, etc.

Key Backend Folders:
  models/          # Database schemas (Order, Product, User, etc.)
  controllers/     # Business logic for each resource
  routes/          # API endpoints (organized by user/admin/superadmin)
  middleware/      # Authentication, authorization, and utilities
  services/        # Business/service layer (orderService, productService, etc.)
  utils/           # Utility functions (error handling, email, etc.)

Key Frontend Folders:
  src/pages/       # Top-level pages (User, Admin, Superadmin, etc.)
  src/components/  # Reusable UI components (Navbar, Header, etc.)
  src/services/    # API service modules (userapi, adminapi, superadmin)
  src/Context/     # React context providers (UserContext, CartContext, etc.)


HIERARCHICAL USER ROLES & ACCESS STRUCTURE
------------------------------------------
The application follows a hierarchical approach with three main user roles:

1. User (Customer):
   - Access: Shop, place orders, manage profile, leave reviews.
   - Code: User APIs/routes are under backend/routes/user and controllers/user. Frontend pages are in src/pages/User and services/userapi.
   - Auth: Uses JWT-based authentication, managed by user middleware.

2. Admin:
   - Access: Manage products, orders, categories, customers, and view analytics for their assigned store.
   - Code: Admin APIs/routes are under backend/routes/admin and controllers/admin. Frontend pages are in src/pages/admin and services/adminapi.
   - Auth: Uses dedicated admin middleware (see backend/middleware/admin/adminMiddleware.js) to verify JWT tokens and admin existence.

3. Superadmin:
   - Access: Platform-wide management, including all stores, workers, global analytics, and admin registration.
   - Code: Superadmin APIs/routes are under backend/routes/superadmin and controllers/superadmin. Frontend pages are in src/pages/superadmin and services/superadmin.
   - Auth: Uses superadmin middleware for authentication and route protection.

Each role has its own set of protected routes, UI pages, and API services, ensuring clear separation of concerns and security boundaries. This structure allows for scalable development and easy addition of new role-specific features.


3. KEY FEATURES & MODULES
-------------------------
- Admin Dashboard: Overview, stats, charts, and navigation
- Orders Management: CRUD for orders
- Products Management: CRUD for products
- Customers Management: User/customer management
- Payments Tracking: Payment status and analytics (Currently integrated with Braintree in sandbox mode; see below for future gateway suggestions)
- Sales Analytics: Charts and reports
- Reviews Management: Manage product reviews
- Workers Management: Administer workers
- Authentication: JWT-based, with middleware for protected routes
- Responsive Design: Mobile-friendly layout

4. HOW TO RUN THE PROJECT
-------------------------
- Install dependencies for both backend and frontend:
    cd backend && npm install
    cd ../frontend && npm install
- Set up environment variables in backend/.env and frontend/.env as needed
- Start backend server:
    npm start   (from backend/)
- Start frontend development server:
    npm start   (from frontend/)
- Access the app via the frontend's local server (usually http://localhost:3000)

5. HOW TO ADD OR MODIFY FEATURES
-------------------------------
- Backend: Add new models in backend/models, controllers in backend/controllers, and routes in backend/routes. Protect sensitive routes with middleware.
- Frontend: Add new pages in src/pages, components in src/components, and services in src/services. Use context for global state.
- For new APIs, create a service in frontend/src/services and connect to backend endpoints.

6. ABSOLUTELY NEEDED FOR GO-LIVE/HOSTING
----------------------------------------
- Forgot Password Functionality: Implement secure password reset for User, Admin, and Superadmin roles
- Payment Gateway Expansion: Integrate Razorpay or other payment gateways for production-ready payments (current setup is Braintree sandbox only)
- Notifications Module: Real-time and persistent user/admin notifications (see suggested file structure below)
- Offers Integration: Add offers/coupons system for products and orders
- Email System: Implement transactional email system (for order confirmations, password resets, etc.)
- Schema Fixes:
    * Product schema: Already includes 'store' field
    * Worker schema: Includes 'store' field
    * Customer schema: Includes 'store' field
    * Admin schema: Includes 'storeName' field
    * **Order schema: DOES NOT include 'store' field – must be added for filtering and analytics by store**
- Image Optimization: All images must be optimized before production deployment to reduce project size and improve performance. Recommended strategies:
    * Compress images using tools like TinyPNG, ImageOptim, or online compressors.
    * Convert images to modern formats (WebP, AVIF) for better compression and quality.
    * Resize images to appropriate dimensions before uploading (avoid oversized images).
    * Implement lazy loading in the frontend to load images only when needed.
    * Use a CDN (Content Delivery Network) for serving static images efficiently.
    * Remove unused or duplicate images from the repository.

7. FURTHER IMPROVEMENTS
------------------------
- Enhanced Analytics: More detailed dashboards and custom reports
- Improved UI/UX: More modern and accessible design
- Role-Based Access Control: Finer-grained permissions
- Automated Testing: Add unit/integration tests for stability

7. FILE/FOLDER REFERENCE TABLE
------------------------------
| Feature/Module         | Backend Location           | Frontend Location               |
|------------------------|---------------------------|---------------------------------|
| Orders Management      | models/Order.js, ...      | src/pages/admin/orders.jsx      |
| Products Management    | models/Product.js, ...    | src/pages/admin/products.jsx    |
| Customers Management   | models/customer.js, ...   | src/pages/admin/customers.jsx   |
| Payments Tracking      | services/orderService.js  | src/pages/admin/payments.jsx    |
| Sales Analytics        | controllers/superadmin/   | src/pages/superadmin/           |
| Reviews Management     | models/review.js, ...     | src/pages/admin/reviews.jsx     |
| Workers Management     | models/Worker.js, ...     | src/pages/superadmin/workers.jsx|
| Auth & Middleware      | middleware/               | src/Context/UserContext.js      |

8. FUTURE NOTIFICATIONS MODULE (SUGGESTED FILES)
------------------------------------------------
Backend:
  models/Notification.js
  controllers/user/notificationController.js
  routes/user/notificationRoutes.js
Frontend:
  src/services/userapi/notificationService.js
  src/context/NotificationContext.js
  src/components/notifications/NotificationBell.jsx
  src/components/notifications/NotificationPanel.jsx

9. CONTACT/SUPPORT
------------------
- For further info, check the README.md or contact the original dev team.
- All code is modular and documented for ease of handoff and future development.

---

CURRENT STRUCTURAL ISSUES & MAIN PROBLEMS
=========================================

Current Work To Be Done (More 2): Reducing Project Size & Asset Management
------------------------------------------------------------
- The `frontend/src/components/Assets` folder contains many extremely large image files (some are 10MB–50MB+ each, e.g., v6.png is 51MB, about3.png is 18MB, homepage.jpg is 23MB, etc.).
- These images are the primary cause of your project’s large size and slow performance.

Actionable Steps to Reduce Project Size:
1. Compress Images: Use tools like TinyPNG, ImageOptim, or Squoosh to compress PNG/JPG files. This can reduce file size by 70–90% with minimal quality loss.
2. Convert to Modern Formats: Convert PNG/JPG images to WebP or AVIF for better compression.
3. Resize Images: Resize to the maximum display size required by your UI (e.g., 1200px wide for banners, 400px for thumbnails).
4. Remove Unused or Duplicate Images: Audit which images are actually used in the codebase and delete any that are not referenced or are duplicates.
5. Implement Lazy Loading: In React, use loading="lazy" on <img> tags or libraries like react-lazyload.
6. Use a CDN for Production: Move images to a CDN or object storage (AWS S3, Cloudinary, etc.) and reference URLs instead of storing them in the repo.
7. Optimize During Build/Deployment: Use build tools/scripts (e.g., imagemin, sharp) to auto-optimize images before deployment.

Summary: The biggest and most immediate win is compressing, resizing, and converting your images. This will dramatically reduce your project size and improve loading speed for users and developers.


1. SCHEMA AND DATA MODELING INCONSISTENCY
- Order Schema Missing `store` Field:
  * `Product`, `Worker`, `Customer`, and `Admin` models all have a `store` or `storeName` field, but `Order` does not.
  * This breaks consistency and makes it impossible to filter orders by store, which is critical for analytics, admin operations, and scaling to multiple stores.

2. FEATURE GAPS FOR PRODUCTION READINESS
- Forgot Password Not Implemented:
  * No mechanism for users, admins, or superadmins to reset their password.
- Payment Gateway (Braintree Sandbox Only):
  * No real transactions can be processed, so the app can’t go live without integrating a production-ready gateway (like Razorpay).
- Notifications Module Missing:
  * No infrastructure for sending or displaying notifications.
- Offers/Coupons & Email System Not Present:
  * No support for promotions or transactional emails (order confirmations, password resets, etc.).

3. CODEBASE/REPO SIZE AND ASSET MANAGEMENT
- Image Optimization Not Addressed:
  * Large, unoptimized images can bloat the repo and slow down the app. No automated or manual process is in place for optimizing images.

4. DOCUMENTATION AND ONBOARDING
- Documentation Gaps (now being addressed):
  * Previously no comprehensive documentation for onboarding new developers or teams.

5. POTENTIAL FOR TECHNICAL DEBT
- Inconsistent Future-Proofing:
  * Some schemas are well designed for scaling, others lag behind.
- No Automated Testing:
  * No mention or evidence of unit/integration tests, which makes refactoring and scaling riskier.

SUMMARY OF THE MAIN PROBLEM RIGHT NOW
-------------------------------------
- The main architectural issue is the lack of a `store` field in the `Order` schema, breaking the multi-store paradigm and making future analytics, filtering, and admin operations much harder.
- The project is not ready for production due to missing critical features (forgot password, real payment gateway, notifications, offers, email system).
- Asset management (images) and documentation were not prioritized from the start.

RECOMMENDATION
--------------
- Fix the `Order` schema immediately and migrate existing data if any.
- Prioritize the implementation of the critical features listed above before attempting to go live.
- Continue improving documentation and enforce consistency across all models and services.

This documentation is intended to help new developers quickly understand, run, and extend the project. For any questions, consult the code comments or reach out to the maintainers.
